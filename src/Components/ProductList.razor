@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService


<div class="row">
    <div class="col">
        <div class="search-box">
            <input id="SearchBar" class="search-text" type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())"
                   value="@FilterDataString" name="" placeholder="Search Posts">

            <a id ="FilterButton" class="search-btn" @onclick="(e => EnableFilterData())" href="#"> </a>
        </div>
    </div>
</div>


<div class="card-columns">
    @{

        var productList = ProductService.GetAllData();

        // If filter is enabled, reduce the data set to the filter string
        if (FilterData)
        {
            productList = productList.Where(m => m.Title.Contains(FilterDataString));
        }


        foreach (var product in productList)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title black-text">@product.Title</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))"
                                data-toggle="modal" data-target="#productModal" id="MoreInfoButton_@product.Id" class="btn btn-primary">
                            More Info
                        </button>
                    </small>

                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))"
                                data-toggle="modal" data-target="#productCommentModel" id="CommentButton_@product.Id" class="btn btn-primary">
                            Comment
                        </button>
                    </small>
                </div>
            </div>
        }
    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title black-text" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true" class="black-text">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text black-text">@selectedProduct.Description</p>
                        </div>
                        <div class="card-body">
                            <p class="card-text black-text">Setup: @selectedProduct.Setup</p>
                        </div>
                        <div class="card-body">
                            <p class="card-text black-text">Location: @selectedProduct.Location</p>
                        </div>
                        <div class="card-body">
                            <p class="card-text black-text">Date: @selectedProduct.Date</p>
                        </div>
                        <div class="card-body">
                            <p class="card-text black-text">Water Temperature: @selectedProduct.WaterTemp</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span class="black-text">Be the first to vote!</span>
                    }
                    else
                    {
                        <span class="black-text">@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}


@if (selectedProduct != null)
{
    <div class="modal fade" id="productCommentModel" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content"> 
                <div class="modal-header">
                    <h5 class="modal-title black-text" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text black-text">@selectedProduct.Description</p>
                        </div>

                        <h3 class="comment-h3">Comments</h3>

                        <div>
                            @{
                                // First show all the existing comments
                                foreach (var comment in selectedProduct.CommentList)
                                {
                                    <div class="row">
                                        <div class="col">
                                            @comment.Comment
                                        </div>
                                    </div>
                                }

                                // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                if (NewComment)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <input type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" id="NewComment" value="@NewCommentText" />
                                            <button @onclick="(e => AddComment())" id="SaveComment" class="btn btn-success" data-toggle="modal">Save Comment</button>
                                        </div>
                                    </div>
                                }

                                // If this is not a new comment, then show the buttons for Adding comment and Close
                                if (NewComment == false)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-primary">Add Comment</button>

                                            <button type="button" id="CloseCard" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    PostModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }


    // New Comment Flag to show the input box or not
    bool NewComment = false;

    // Next Comment Text is what the comment text is
    string NewCommentText = "";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    void ShowNewCommentInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewComment = true;
    }

    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    void UpdateCommentText(string newCommentText)
    {
        NewCommentText = newCommentText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    void AddComment()
    {
        // Refactor to be a call to the middle tier
        // ProductService.AddCommentToProduct(selectedProduct, comment);


        // Add it to the Comment List
        selectedProduct.CommentList.Add(new CommentModel() { Comment = NewCommentText });

        // Call for the Product to be saved
        ProductService.UpdateData(selectedProduct);

        // Set the NewComment flag to false to hide the input box
        NewComment = false;
    }


    string FilterDataString = "";
    bool FilterData = false;

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    
    //void ClearFilterData()
    //{
        // If the Filter is enabled, set the filter flag
    //    FilterData = false;
    //}
    //

}



